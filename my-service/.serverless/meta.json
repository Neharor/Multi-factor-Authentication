{
  "C:\\Users\\nmegh\\Downloads\\proj547\\my-service": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\nmegh\\Downloads\\proj547\\my-service",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "my-serverless-project",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "ap-south-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*",
              "kms:*",
              "lambda:InvokeFunction"
            ],
            "Resource": "*"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/my-serverless-project-dev-getUser"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/my-serverless-project-dev-createUser"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "my-serverless-project",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-serverless-project-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-serverless-project-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*",
                            "kms:*",
                            "lambda:InvokeFunction"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "my-serverless-project",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/my-serverless-project/dev/1724969294643-2024-08-29T22:08:14.643Z/my-serverless-project.zip"
                },
                "Handler": "handlers/userHandler.getUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "my-serverless-project-dev-getUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/my-serverless-project/dev/1724969294643-2024-08-29T22:08:14.643Z/my-serverless-project.zip"
                },
                "Handler": "handlers/userHandler.createUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "my-serverless-project-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "GetUserLambdaVersionW9kEMu984XO88YhfKZLZbxWEqDli7AzHUXxKCJZPo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "Vgr+vNSxAUmeA5WElJckyFcR26oxpXnAAR1OsHigIZg="
              }
            },
            "CreateUserLambdaVersionZ54wyL9W5L5y2oS3hrkda22PgEShpgLIClbZO8cCM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "Vgr+vNSxAUmeA5WElJckyFcR26oxpXnAAR1OsHigIZg="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-my-serverless-project",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersEmailVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "{email}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersEmailVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersEmailVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersEmailVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersEmailVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "1Underscore4YebdRlsQApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "1Underscore4YebdRlsQApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUsersPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "1Underscore4YebdRlsQApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "1Underscore4YebdRlsQApiGatewayAuthorizer"
              ]
            },
            "1Underscore4YebdRlsQApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "1_4YebdRlsQ",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Type": "COGNITO_USER_POOLS",
                "ProviderARNs": [
                  "arn:aws:cognito-idp:ap-south-1:058264448474:userpool/ap-south-1_4YebdRlsQ"
                ]
              }
            },
            "ApiGatewayDeployment1724969276733": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUsersEmailVarOptions",
                "ApiGatewayMethodUsersOptions",
                "ApiGatewayMethodUsersEmailVarGet",
                "ApiGatewayMethodUsersPost"
              ]
            },
            "GetUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UserTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "UserTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "email",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            },
            "KMSKey": {
              "Type": "AWS::KMS::Key",
              "Properties": {
                "Description": "Key for encrypting user data",
                "EnableKeyRotation": true
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-my-serverless-project-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersionW9kEMu984XO88YhfKZLZbxWEqDli7AzHUXxKCJZPo"
              },
              "Export": {
                "Name": "sls-my-serverless-project-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionZ54wyL9W5L5y2oS3hrkda22PgEShpgLIClbZO8cCM"
              },
              "Export": {
                "Name": "sls-my-serverless-project-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-my-serverless-project-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getUser": {
          "handler": "handlers/userHandler.getUser",
          "events": [
            {
              "http": {
                "path": "users/{email}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "1_4YebdRlsQ",
                  "arn": "arn:aws:cognito-idp:ap-south-1:058264448474:userpool/ap-south-1_4YebdRlsQ",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "my-serverless-project-dev-getUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersionW9kEMu984XO88YhfKZLZbxWEqDli7AzHUXxKCJZPo"
        },
        "createUser": {
          "handler": "handlers/userHandler.createUser",
          "events": [
            {
              "http": {
                "path": "users",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "1_4YebdRlsQ",
                  "arn": "arn:aws:cognito-idp:ap-south-1:058264448474:userpool/ap-south-1_4YebdRlsQ",
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "my-serverless-project-dev-createUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionZ54wyL9W5L5y2oS3hrkda22PgEShpgLIClbZO8cCM"
        }
      },
      "resources": {
        "Resources": {
          "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "UserTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          },
          "KMSKey": {
            "Type": "AWS::KMS::Key",
            "Properties": {
              "Description": "Key for encrypting user data",
              "EnableKeyRotation": true
            }
          }
        },
        "Outputs": {}
      },
      "plugins": [
        "serverless-offline"
      ]
    },
    "serviceRawFile": "service: my-serverless-project\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: ap-south-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n        - kms:*\r\n        - lambda:InvokeFunction\r\n      Resource: \"*\"\r\n\r\nfunctions:\r\n  getUser:\r\n    handler: handlers/userHandler.getUser\r\n    events:\r\n      - http:\r\n          path: users/{email}\r\n          method: get\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            arn: arn:aws:cognito-idp:ap-south-1:058264448474:userpool/ap-south-1_4YebdRlsQ\r\n\r\n  createUser:\r\n    handler: handlers/userHandler.createUser\r\n    events:\r\n      - http:\r\n          path: users\r\n          method: post\r\n          cors:\r\n            origin: '*'\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n          authorizer:\r\n            type: COGNITO_USER_POOLS\r\n            arn: arn:aws:cognito-idp:ap-south-1:058264448474:userpool/ap-south-1_4YebdRlsQ\r\n\r\nresources:\r\n  Resources:\r\n    UserTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: UserTable\r\n        AttributeDefinitions:\r\n          - AttributeName: email\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: email\r\n            KeyType: HASH\r\n        ProvisionedThroughput:\r\n          ReadCapacityUnits: 5\r\n          WriteCapacityUnits: 5\r\n\r\n    KMSKey:\r\n      Type: AWS::KMS::Key\r\n      Properties:\r\n        Description: Key for encrypting user data\r\n        EnableKeyRotation: true\r\n\r\nplugins:\r\n  - serverless-offline\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "5a0d2d5587bedfa83b3fde0f78bfa51f",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "af8298b9-93a6-4221-b461-2ea45cb379bf",
    "orgName": "cityuniversityss",
    "userId": "tWg17LxPCZ4Hqn3T6X",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "cityuniversityss",
    "subscription": null,
    "userEmail": "n.megha82@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "058264448474",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackName": "my-serverless-project-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:058264448474:stack/my-serverless-project-dev/94e7d560-6646-11ef-b1c6-06d2e9819a1b",
    "serviceProviderAwsCfStackCreated": "2024-08-29T20:38:00.427Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-29T22:09:31.878Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:058264448474:function:my-serverless-project-dev-getUser:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-my-serverless-project-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:058264448474:function:my-serverless-project-dev-createUser:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-my-serverless-project-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://exy3k510hb.execute-api.ap-south-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-my-serverless-project-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "my-serverless-project-dev-serverlessdeploymentbuck-pxc4eme5il8u",
        "ExportName": "sls-my-serverless-project-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}